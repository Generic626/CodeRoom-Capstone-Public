import Button from "@mui/material/Button";
import CssBaseline from "@mui/material/CssBaseline";
import TextField from "@mui/material/TextField";
import { useState, useEffect, useContext } from "react";
import Paper from "@mui/material/Paper";
import Box from "@mui/material/Box";
import Grid from "@mui/material/Grid";
import Typography from "@mui/material/Typography";
import { createTheme, ThemeProvider } from "@mui/material/styles";
import Landing from "../assets/landing2.png";
import BrandLogo from "../assets/brand-logo.png";
import { NavLink } from "react-router-dom";
import axios from "axios";
import { useNavigate } from "react-router";
import { SuccessContext } from "../context/success-context";

function Copyright(props) {
  return (
    <Typography
      variant="body2"
      color="text.secondary"
      align="center"
      {...props}
    >
      {"Copyright Â© "}
      CodeRoom {new Date().getFullYear()}
      {". "}Created by Matthew Fung
    </Typography>
  );
}

const defaultTheme = createTheme();

export default function CreateAccountPage() {
  const navigate = useNavigate();
  const { setSuccess } = useContext(SuccessContext);
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [secondPwd, setSecondPwd] = useState("");
  const [errors, setErrors] = useState({});

  // Sets the page title
  useEffect(() => {
    document.title = "Login"; // Set the desired page title
    return () => {
      document.title = "CodeRoom"; // Reset the title when the component unmounts
    };
  }, []);

  // Handles form submission
  const handleSubmit = async (event) => {
    event.preventDefault();

    const formErrors = {};
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    // check if email is empty
    if (!name) {
      formErrors.name = "Name is required";
    }
    // check if email is empty
    if (!email) {
      formErrors.email = "Email is required";
    }
    // check if given email is in valid format
    if (!emailRegex.test(email)) {
      formErrors.email = "Invalid Email format";
    }
    // check if password is empty
    if (!password) {
      formErrors.password = "Password is required";
    }
    // check if secondPwd is empty
    if (!secondPwd) {
      formErrors.secondPwd = "Re-confirmed password is required";
    }
    // check if 1st password is equal to 2nd password
    if (password != secondPwd) {
      formErrors.password =
        "The passwords given are not identical, please check again";
    }

    // Set errors or submit the form
    if (Object.keys(formErrors).length > 0) {
      setErrors(formErrors);
    } else {
      // submit the information to api to create an account
      try {
        // submit to api to create account
        // redirect user to main page
        const createAccountPayload = { name, email, password };
        await axios.post(
          "http://localhost:5001/api/user/create-account",
          createAccountPayload
        );
        setSuccess(true);
        navigate(`/`);
      } catch (error) {
        console.log(error.response.status);
        formErrors.createFailed =
          "Create Account Failed, this email has been registered.";
        setErrors(formErrors);
      }
    }
  };

  return (
    <ThemeProvider theme={defaultTheme}>
      <Grid container component="main" sx={{ height: "100vh" }}>
        {/* Reset Default CSS styling */}
        <CssBaseline />
        {/* Landing Image */}
        <Grid
          item
          xs={false}
          sm={4}
          md={6}
          lg={8}
          sx={{
            backgroundImage: `url(${Landing})`,
            backgroundRepeat: "no-repeat",
            backgroundColor: (t) =>
              t.palette.mode === "light"
                ? t.palette.grey[50]
                : t.palette.grey[900],
            backgroundSize: "cover",
            backgroundPosition: "center",
          }}
        ></Grid>
        <Grid
          item
          xs={12}
          sm={8}
          md={6}
          lg={4}
          component={Paper}
          elevation={6}
          square
          className="flex flex-col items-center justify-center"
        >
          {/* Login Form */}
          <Box
            sx={{
              my: 8,
              mx: 4,
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
            }}
          >
            <Box className="w-14 h-14 my-5">
              <img
                src={BrandLogo}
                alt="CodeRoom Logo - Generated By StableDiffusion"
              />
            </Box>
            <Typography component="h1" variant="h5">
              Create Account
            </Typography>
            <Box
              component="form"
              noValidate
              onSubmit={handleSubmit}
              sx={{ mt: 1 }}
            >
              {/* Name */}
              <TextField
                margin="normal"
                required
                fullWidth
                id="name"
                label="Name"
                name="name"
                autoFocus
                autoComplete="name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                error={errors.name != undefined}
                helperText={errors.name}
              />
              {/* Email */}
              <TextField
                margin="normal"
                required
                fullWidth
                id="email"
                label="Email Address"
                name="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                error={errors.email != undefined}
                helperText={errors.email}
              />
              {/* Password */}
              <TextField
                margin="normal"
                required
                fullWidth
                name="password"
                label="Password"
                type="password"
                id="password"
                autoComplete="current-password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                error={errors.password != undefined}
                helperText={errors.password}
              />
              {/* Re-confirm password */}
              <TextField
                margin="normal"
                required
                fullWidth
                name="secondPwd"
                label="Re-enter your password"
                type="password"
                id="secondPwd"
                value={secondPwd}
                onChange={(e) => setSecondPwd(e.target.value)}
                error={errors.secondPwd != undefined}
                helperText={errors.secondPwd}
              />

              <Button
                type="submit"
                fullWidth
                variant="contained"
                sx={{ mt: 2, mb: 1 }}
              >
                Sign-Up
              </Button>
              {errors.createFailed && (
                <Typography className=" text-red-500 text-xs" sx={{ mb: 1 }}>
                  {errors.createFailed}
                </Typography>
              )}
              <NavLink
                to="/"
                className={(isActive) => (isActive ? "active" : "")}
              >
                <div className="text-sm underline">
                  Already have an account?
                </div>
              </NavLink>
              <Copyright sx={{ mt: 5 }} />
            </Box>
          </Box>
        </Grid>
      </Grid>
    </ThemeProvider>
  );
}
